// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the User model
model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique
  email        String    @unique
  password     String
  // roles        String[]  @default(["user"])
  name         String?
  avatar       String?
  bio          String?
  phone        String?
  address      String?
  // Define the availability field to store consulting hours
  availability  String?
  
  // Define relationships for appointments and messages
  appointmentsAsTutor Appointment[] @relation("tutorAppointments")
  appointmentsAsUser  Appointment[] @relation("userAppointments")
  sentMessages       Message[] @relation("sentMessages")
  receivedMessages   Message[] @relation("receivedMessages")
  reviewsAsTutor    Review[] @relation("tutorReviews")
  reviewsAsUser     Review[] @relation("userReviews")
  profile           TutorProfile?

}
model TutorProfile {
  id           Int       @id @default(autoincrement())
  tutor        User      @relation(fields: [tutorId], references: [id])
  tutorId      Int @unique
  bio          String?
  subjects     String[] // An array of subjects the tutor can teach
  hourlyRate   Int
  availability Json     // Store availability data as JSON
  // Add other fields specific to the tutor's profile


  keywords KeywordsOnUsers[]

}

// Define the Appointment model
model Appointment {
  id           Int       @id @default(autoincrement())
  tutor        User      @relation("tutorAppointments", fields: [tutorId], references: [id])
  tutorId      Int
  user         User      @relation("userAppointments", fields: [userId], references: [id])
  userId       Int
  startTime    DateTime
  endTime      DateTime
  status       String    @default("pending")
  subject      String?
  location     String?
  price        Int?
  // Define the reviews relationship
  reviews      Review[]
}

// Define the Message model
model Message {
  id           Int       @id @default(autoincrement())
  sender       User      @relation("sentMessages", fields: [senderId], references: [id])
  senderId     Int
  recipient    User      @relation("receivedMessages", fields: [recipientId], references: [id])
  recipientId  Int
  content      String
  timestamp    DateTime @default(now())
}

// Define the Review model
// Define the Review model
model Review {
  id      Int    @id @default(autoincrement())
  user    User   @relation("userReviews", fields: [userId], references: [id])
  userId  Int
  tutor   User   @relation("tutorReviews", fields: [tutorId], references: [id])
  tutorId Int
  rating  Int
  comment String?
  date    DateTime @default(now())
  appointment Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId Int
}

model Keyword{
  id      Int    @id @default(autoincrement())
  keyword String

  tutors KeywordsOnUsers[]
}

model KeywordsOnUsers{
  id      Int    @id @default(autoincrement())
  keywordId Int
  tutorId Int 

  keyword Keyword @relation(fields: [keywordId],references: [id])
  tutor TutorProfile @relation(fields: [tutorId],references: [id])
  
}